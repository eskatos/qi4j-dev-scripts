#!/bin/sh
# Copyright (c) 2010, Paul Merlin. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Helper script to invoke the Qi4j build system.
# You need to set the QI4J_VERSION environment variable.

set -e
[ -z $QI4J_VERSION ] && echo "QI4J_VERSION is not set" && exit 1

usage() {
  echo "qi4j-build [-p group:project] command [flags]"
  echo
  echo "  -p Select the target project"
  echo "    group can be core, library, extension, tool, sample or tutorial"
  echo "    project is the base name of the targeted submodule"
  echo
  echo "  Available commands"
  echo "    clean            Clean output"
  echo "    test             Run tests"
  echo "    install          Install only main artifacts"
  echo "    devinstall       Install javadoc and sources artifacts"
  echo "    distinstall      Install distributions archives"
  echo
  echo "  Available flags"
  echo "    skipTests        Skip tests"
  echo
  echo "  Examples"
  echo "    qi4j-build clean"
  echo "    qi4j-build devinstall"
  echo "    qi4j-build library:servlet test"
  echo "    qi4j-build extension:entitystore-file test"
  echo "    qi4j-build libraries install"
  echo "    qi4j-build extensions install"
  echo "    qi4j-build distinstall"
  echo
}

[ -z $1 ] && usage && exit 1

if [ -f "gradlew" ]
then
    gradle="./gradlew"
    echo "Using gradle wrapper found in current directory!"
else
    gradle="gradle"
fi

target=""
if [ "${1}" = "-p" ]
then
  shift
  gradle="${gradle} -a"
  case "${1}" in
    # Special core groupId handling as it is not going plural
    core:*)
      target=`echo $1 | sed -e "s/core:\(.*\)/:org.qi4j.core:org.qi4j.core.\1:/"`;;
    # Special libraries plural groupId handling ...
    library:*)
      target=`echo $1 | sed -e "s/library:\(.*\)/:org.qi4j.libraries:org.qi4j.library.\1:/"`;;
    # Special extensions plural groupId handling ...
    extension:*)
      target=`echo $1 | sed -e "s/extension:\(.*\)/:org.qi4j.extensions:org.qi4j.extension.\1:/"`;;
    *:*)
      target=`echo $1 | sed -e "s/\(.*\):\(.*\)/:org.qi4j.\1s:org.qi4j.\1.\2:/"`;;
    *)
      target=":org.qi4j.${1}:";;
  esac
  shift
fi

command=$1

shift
while [ "$*" != "" ]
do
  case $1 in
    skipTests)
      gradle="${gradle} -x test";;
    *)
      echo "Unknown flag ${1}"
      echo
      usage
      exit 1;;
  esac
  shift
done

skip_global="-x signArchives"
skip_full="-x javadoc -x javadocJar -x sourceJar"
skip_dist="-x :javadocs -x :distLayout -x :tarBinaries -x :tarSources -x :zipBinaries -x :zipSources"
case $command in
  clean)
    gradle="${gradle} ${target}clean"
    ;;
  test)
    gradle="${gradle} ${target}test"
    ;;
  install)
    gradle="${gradle} ${skip_global} ${skip_full} ${skip_dist} ${target}install"
    ;;
  devinstall)
    gradle="${gradle} ${skip_global} ${skip_dist} ${target}install"
    ;;
  distinstall)
    gradle="${gradle} ${skip_global} ${target}install"
    ;;
  *)
    echo "Unknown command ${command}"
    echo
    usage
    exit 1;;
esac

gradle="${gradle} -Dversion=${QI4J_VERSION}"

echo "Will run the following gradle command:"
echo
echo "    ${gradle}"
echo

# Execute gradle
$gradle
